// Created by Microsoft (R) C/C++ Compiler Version 10.00.30319.01 (55d4ad0f).
//
// e:\05-svn\v1r2-pccode\plugin\ie\iectdctrl\debug\espace.tli
//
// Wrapper implementations for Win32 type library ..\tlb\eSpace.tlb
// compiler-generated file created 05/27/14 at 10:34:34 - DO NOT EDIT!

#pragma once

//
// interface IMessenger wrapper method implementations
//

inline IDispatchPtr IMessenger::GetWindow ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Window(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::ViewProfile ( const _variant_t & vContact ) {
    HRESULT _hr = raw_ViewProfile(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IMessenger::GetReceiveFileDirectory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ReceiveFileDirectory(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IMessenger::StartVoice ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StartVoice(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger::InviteApp ( const _variant_t & vContact, _bstr_t bstrAppID ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_InviteApp(vContact, bstrAppID, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::SendMail ( const _variant_t & vContact ) {
    HRESULT _hr = raw_SendMail(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::OpenInbox ( ) {
    HRESULT _hr = raw_OpenInbox();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::SendFile ( const _variant_t & vContact, _bstr_t bstrFileName ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_SendFile(vContact, bstrFileName, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::Signout ( ) {
    HRESULT _hr = raw_Signout();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::Signin ( long hwndParent, _bstr_t bstrSigninName, _bstr_t bstrPassword ) {
    HRESULT _hr = raw_Signin(hwndParent, bstrSigninName, bstrPassword);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::GetContact ( _bstr_t bstrSigninName, _bstr_t bstrServiceId ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_GetContact(bstrSigninName, bstrServiceId, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::OptionsPages ( long hwndParent, MOPTIONPAGE MOPTIONPAGE ) {
    HRESULT _hr = raw_OptionsPages(hwndParent, MOPTIONPAGE);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::AddContact ( long hwndParent, _bstr_t bstrEMail ) {
    HRESULT _hr = raw_AddContact(hwndParent, bstrEMail);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessenger::FindContact ( long hwndParent, _bstr_t bstrFirstName, _bstr_t bstrLastName, const _variant_t & vbstrCity, const _variant_t & vbstrState, const _variant_t & vbstrCountry ) {
    HRESULT _hr = raw_FindContact(hwndParent, bstrFirstName, bstrLastName, vbstrCity, vbstrState, vbstrCountry);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::InstantMessage ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_InstantMessage(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger::Phone ( const _variant_t & vContact, MPHONE_TYPE ePhoneNumber, _bstr_t bstrNumber ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Phone(vContact, ePhoneNumber, bstrNumber, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::MediaWizard ( long hwndParent ) {
    HRESULT _hr = raw_MediaWizard(hwndParent);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::Page ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Page(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessenger::AutoSignin ( ) {
    HRESULT _hr = raw_AutoSignin();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessenger::GetMyContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MyContacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessenger::GetMySigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MySigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessenger::GetMyFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessenger::PutMyStatus ( MISTATUS pmStatus ) {
    HRESULT _hr = put_MyStatus(pmStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline MISTATUS IMessenger::GetMyStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_MyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessenger::GetUnreadEmailCount ( MUAFOLDER mFolder ) {
    long _result = 0;
    HRESULT _hr = get_UnreadEmailCount(mFolder, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessenger::GetMyServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessenger::GetMyPhoneNumber ( MPHONE_TYPE PhoneType ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyPhoneNumber(PhoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IMessenger::GetMyProperty ( MCONTACTPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_MyProperty(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessenger::PutMyProperty ( MCONTACTPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_MyProperty(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessenger::GetMyServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline IDispatchPtr IMessenger::GetServices ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Services(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessenger2 wrapper method implementations
//

inline MUASORT IMessenger2::GetContactsSortOrder ( ) {
    MUASORT _result;
    HRESULT _hr = get_ContactsSortOrder(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessenger2::PutContactsSortOrder ( MUASORT pSort ) {
    HRESULT _hr = put_ContactsSortOrder(pSort);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline IDispatchPtr IMessenger2::StartVideo ( const _variant_t & vContact ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_StartVideo(vContact, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger2::GetMyGroups ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_MyGroups(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IDispatchPtr IMessenger2::CreateGroup ( _bstr_t bstrName, const _variant_t & vService ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_CreateGroup(bstrName, vService, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessenger3 wrapper method implementations
//

inline _variant_t IMessenger3::GetProperty ( MMESSENGERPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessenger3::PutProperty ( MMESSENGERPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerAdvanced wrapper method implementations
//

inline _variant_t IMessengerAdvanced::StartConversation ( CONVERSATION_TYPE ConversationType, const _variant_t & vParticipants, const _variant_t & vContextualData, const _variant_t & vSubject, const _variant_t & vConversationIndex, const _variant_t & vConversationData ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = raw_StartConversation(ConversationType, vParticipants, vContextualData, vSubject, vConversationIndex, vConversationData, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline _bstr_t IMessengerAdvanced::GetAuthenticationInfo ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetAuthenticationInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMessengerContactResolution wrapper method implementations
//

inline _bstr_t IMessengerContactResolution::ResolveContact ( ADDRESS_TYPE AddressType, CONTACT_RESOLUTION_TYPE ResolutionType, _bstr_t bstrAddress ) {
    BSTR _result = 0;
    HRESULT _hr = raw_ResolveContact(AddressType, ResolutionType, bstrAddress, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// dispinterface DMessengerEvents wrapper method implementations
//

inline HRESULT DMessengerEvents::OnGroupAdded ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x415, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnGroupRemoved ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x416, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnGroupNameChanged ( long hr, IDispatch * pMGroup ) {
    return _com_dispatch_method(this, 0x417, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMGroup);
}

inline HRESULT DMessengerEvents::OnContactAddedToGroup ( long hr, IDispatch * pMGroup, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x418, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009", hr, pMGroup, pMContact);
}

inline HRESULT DMessengerEvents::OnContactRemovedFromGroup ( long hr, IDispatch * pMGroup, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x419, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0009", hr, pMGroup, pMContact);
}

inline HRESULT DMessengerEvents::OnIMWindowCreated ( IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x411, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowDestroyed ( IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x412, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009", pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowContactAdded ( IDispatch * pContact, IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x413, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", pContact, pIMWindow);
}

inline HRESULT DMessengerEvents::OnIMWindowContactRemoved ( IDispatch * pContact, IDispatch * pIMWindow ) {
    return _com_dispatch_method(this, 0x414, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0009", pContact, pIMWindow);
}

inline HRESULT DMessengerEvents::OnAppShutdown ( ) {
    return _com_dispatch_method(this, 0x408, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DMessengerEvents::OnSignin ( long hr ) {
    return _com_dispatch_method(this, 0x400, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003", hr);
}

inline HRESULT DMessengerEvents::OnSignout ( ) {
    return _com_dispatch_method(this, 0x401, DISPATCH_METHOD, VT_EMPTY, NULL, NULL);
}

inline HRESULT DMessengerEvents::OnContactListAdd ( long hr, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x402, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMContact);
}

inline HRESULT DMessengerEvents::OnContactListRemove ( long hr, IDispatch * pMContact ) {
    return _com_dispatch_method(this, 0x403, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009", hr, pMContact);
}

inline HRESULT DMessengerEvents::OnMyFriendlyNameChange ( long hr, _bstr_t bstrPrevFriendlyName ) {
    return _com_dispatch_method(this, 0x405, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", hr, (BSTR)bstrPrevFriendlyName);
}

inline HRESULT DMessengerEvents::OnMyStatusChange ( long hr, MISTATUS mMyStatus ) {
    return _com_dispatch_method(this, 0x407, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003", hr, mMyStatus);
}

inline HRESULT DMessengerEvents::OnMyPhoneChange ( MPHONE_TYPE PhoneType, _bstr_t bstrNumber ) {
    return _com_dispatch_method(this, 0x40e, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0008", PhoneType, (BSTR)bstrNumber);
}

inline HRESULT DMessengerEvents::OnMyPropertyChange ( long hr, MCONTACTPROPERTY ePropType, const _variant_t & vPropVal ) {
    return _com_dispatch_method(this, 0x409, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x000c", hr, ePropType, &vPropVal);
}

inline HRESULT DMessengerEvents::OnContactFriendlyNameChange ( long hr, IDispatch * pMContact, _bstr_t bstrPrevFriendlyName ) {
    return _com_dispatch_method(this, 0x404, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0008", hr, pMContact, (BSTR)bstrPrevFriendlyName);
}

inline HRESULT DMessengerEvents::OnContactStatusChange ( IDispatch * pMContact, MISTATUS mStatus ) {
    return _com_dispatch_method(this, 0x406, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0009\x0003", pMContact, mStatus);
}

inline HRESULT DMessengerEvents::OnContactPropertyChange ( long hr, IDispatch * pContact, MCONTACTPROPERTY ePropType, const _variant_t & vPropVal ) {
    return _com_dispatch_method(this, 0x40a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0003\x000c", hr, pContact, ePropType, &vPropVal);
}

inline HRESULT DMessengerEvents::OnContactBlockChange ( long hr, IDispatch * pContact, VARIANT_BOOL pBoolBlock ) {
    return _com_dispatch_method(this, 0x40b, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x000b", hr, pContact, pBoolBlock);
}

inline HRESULT DMessengerEvents::OnContactPagerChange ( long hr, IDispatch * pContact, VARIANT_BOOL pBoolPage ) {
    return _com_dispatch_method(this, 0x40c, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x000b", hr, pContact, pBoolPage);
}

inline HRESULT DMessengerEvents::OnContactPhoneChange ( long hr, IDispatch * pContact, MPHONE_TYPE PhoneType, _bstr_t bstrNumber ) {
    return _com_dispatch_method(this, 0x40d, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0009\x0003\x0008", hr, pContact, PhoneType, (BSTR)bstrNumber);
}

inline HRESULT DMessengerEvents::OnUnreadEmailChange ( MUAFOLDER mFolder, long cUnreadEmail, VARIANT_BOOL * pBoolfEnableDefault ) {
    return _com_dispatch_method(this, 0x40f, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x400b", mFolder, cUnreadEmail, pBoolfEnableDefault);
}

inline HRESULT DMessengerEvents::OnContactResolved ( long hr, ADDRESS_TYPE AddressType, _bstr_t bstrAddress, _bstr_t bstrIMAddress ) {
    return _com_dispatch_method(this, 0x41a, DISPATCH_METHOD, VT_EMPTY, NULL, 
        L"\x0003\x0003\x0008\x0008", hr, AddressType, (BSTR)bstrAddress, (BSTR)bstrIMAddress);
}

//
// interface IMessengerWindow wrapper method implementations
//

inline HRESULT IMessengerWindow::Close ( ) {
    HRESULT _hr = raw_Close();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessengerWindow::GetHWND ( ) {
    long _result = 0;
    HRESULT _hr = get_HWND(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline long IMessengerWindow::GetLeft ( ) {
    long _result = 0;
    HRESULT _hr = get_Left(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutLeft ( long plLeft ) {
    HRESULT _hr = put_Left(plLeft);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetTop ( ) {
    long _result = 0;
    HRESULT _hr = get_Top(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutTop ( long plTop ) {
    HRESULT _hr = put_Top(plTop);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetWidth ( ) {
    long _result = 0;
    HRESULT _hr = get_Width(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutWidth ( long plWidth ) {
    HRESULT _hr = put_Width(plWidth);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline long IMessengerWindow::GetHeight ( ) {
    long _result = 0;
    HRESULT _hr = get_Height(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerWindow::PutHeight ( long plHeight ) {
    HRESULT _hr = put_Height(plHeight);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessengerWindow::GetIsClosed ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsClosed(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IMessengerWindow::Show ( ) {
    HRESULT _hr = raw_Show();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _variant_t IMessengerWindow::GetProperty ( MWINDOWPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerWindow::PutProperty ( MWINDOWPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerConversationWnd wrapper method implementations
//

inline IDispatchPtr IMessengerConversationWnd::GetContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessengerConversationWnd::GetHistory ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_History(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IMessengerConversationWnd::AddContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_AddContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMessengerConversationWndAdvanced wrapper method implementations
//

inline HRESULT IMessengerConversationWndAdvanced::SendText ( _bstr_t bstrTextMessage ) {
    HRESULT _hr = raw_SendText(bstrTextMessage);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IMessengerContact wrapper method implementations
//

inline _bstr_t IMessengerContact::GetFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_FriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline MISTATUS IMessengerContact::GetStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_Status(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerContact::GetSigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_SigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerContact::GetServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IMessengerContact::GetBlocked ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_Blocked(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerContact::PutBlocked ( VARIANT_BOOL pBoolBlock ) {
    HRESULT _hr = put_Blocked(pBoolBlock);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline VARIANT_BOOL IMessengerContact::GetCanPage ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_CanPage(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerContact::GetPhoneNumber ( MPHONE_TYPE PhoneType ) {
    BSTR _result = 0;
    HRESULT _hr = get_PhoneNumber(PhoneType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline VARIANT_BOOL IMessengerContact::GetIsSelf ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsSelf(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _variant_t IMessengerContact::GetProperty ( MCONTACTPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerContact::PutProperty ( MCONTACTPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _bstr_t IMessengerContact::GetServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

//
// interface IMessengerContactAdvanced wrapper method implementations
//

inline VARIANT_BOOL IMessengerContactAdvanced::GetIsTagged ( ) {
    VARIANT_BOOL _result = 0;
    HRESULT _hr = get_IsTagged(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline void IMessengerContactAdvanced::PutIsTagged ( VARIANT_BOOL pBoolIsTagged ) {
    HRESULT _hr = put_IsTagged(pBoolIsTagged);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline _variant_t IMessengerContactAdvanced::GetPresenceProperties ( ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_PresenceProperties(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerContactAdvanced::PutPresenceProperties ( const _variant_t & pvPresenceProperties ) {
    HRESULT _hr = put_PresenceProperties(pvPresenceProperties);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerContacts wrapper method implementations
//

inline long IMessengerContacts::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerContacts::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline HRESULT IMessengerContacts::Remove ( IDispatch * pMContact ) {
    HRESULT _hr = raw_Remove(pMContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IUnknownPtr IMessengerContacts::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerService wrapper method implementations
//

inline _bstr_t IMessengerService::GetServiceName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerService::GetServiceId ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_ServiceId(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IMessengerService::GetMyFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MyFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline MISTATUS IMessengerService::GetMyStatus ( ) {
    MISTATUS _result;
    HRESULT _hr = get_MyStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline _bstr_t IMessengerService::GetMySigninName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_MySigninName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _variant_t IMessengerService::GetProperty ( MSERVICEPROPERTY ePropType ) {
    VARIANT _result;
    VariantInit(&_result);
    HRESULT _hr = get_Property(ePropType, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _variant_t(_result, false);
}

inline void IMessengerService::PutProperty ( MSERVICEPROPERTY ePropType, const _variant_t & pvPropVal ) {
    HRESULT _hr = put_Property(ePropType, pvPropVal);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

//
// interface IMessengerServices wrapper method implementations
//

inline IDispatchPtr IMessengerServices::GetPrimaryService ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_PrimaryService(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline long IMessengerServices::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerServices::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IMessengerServices::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerGroup wrapper method implementations
//

inline IDispatchPtr IMessengerGroup::GetContacts ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Contacts(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline _bstr_t IMessengerGroup::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = get_Name(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline void IMessengerGroup::PutName ( _bstr_t bstrName ) {
    HRESULT _hr = put_Name(bstrName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
}

inline HRESULT IMessengerGroup::AddContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_AddContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerGroup::RemoveContact ( const _variant_t & vContact ) {
    HRESULT _hr = raw_RemoveContact(vContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IDispatchPtr IMessengerGroup::GetService ( ) {
    IDispatch * _result = 0;
    HRESULT _hr = get_Service(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

//
// interface IMessengerGroups wrapper method implementations
//

inline HRESULT IMessengerGroups::Remove ( IDispatch * pGroup ) {
    HRESULT _hr = raw_Remove(pGroup);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline long IMessengerGroups::GetCount ( ) {
    long _result = 0;
    HRESULT _hr = get_Count(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline IDispatchPtr IMessengerGroups::Item ( long Index ) {
    IDispatch * _result = 0;
    HRESULT _hr = raw_Item(Index, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IDispatchPtr(_result, false);
}

inline IUnknownPtr IMessengerGroups::Get_NewEnum ( ) {
    IUnknown * _result = 0;
    HRESULT _hr = get__NewEnum(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IUnknownPtr(_result, false);
}

//
// interface IMessengerEventHandler wrapper method implementations
//

inline HRESULT IMessengerEventHandler::NotifyContactStatusChange ( IDispatch * pDispContact, MISTATUS MISTATUS ) {
    HRESULT _hr = raw_NotifyContactStatusChange(pDispContact, MISTATUS);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyAppShutdown ( ) {
    HRESULT _hr = raw_NotifyAppShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifySignOut ( ) {
    HRESULT _hr = raw_NotifySignOut();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifySignIn ( ) {
    HRESULT _hr = raw_NotifySignIn();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactListAdd ( long hResult, IDispatch * pDispContact ) {
    HRESULT _hr = raw_NotifyContactListAdd(hResult, pDispContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactListRemove ( long hResult, IDispatch * pDispContact ) {
    HRESULT _hr = raw_NotifyContactListRemove(hResult, pDispContact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IMessengerEventHandler::NotifyContactResolved ( long hResult, ADDRESS_TYPE AddressType, _bstr_t bstrAddress, _bstr_t bstrIMAddress ) {
    HRESULT _hr = raw_NotifyContactResolved(hResult, AddressType, bstrAddress, bstrIMAddress);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSContactInfo wrapper method implementations
//

inline _bstr_t IECSContactInfo::GetFriendlyName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetFriendlyName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetID ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetID(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetHomePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetHomePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetOfficePhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOfficePhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetOtherPhone ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetOtherPhone(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetCorpName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetCorpName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetDeptName ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetDeptName(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetEmail ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetEmail(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetMobile ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetMobile(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline long IECSContactInfo::GetStatus ( ) {
    long _result = 0;
    HRESULT _hr = raw_GetStatus(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _result;
}

inline HRESULT IECSContactInfo::SetFriendlyName ( _bstr_t FriendlyName ) {
    HRESULT _hr = raw_SetFriendlyName(FriendlyName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetID ( _bstr_t ID ) {
    HRESULT _hr = raw_SetID(ID);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetName ( _bstr_t Name ) {
    HRESULT _hr = raw_SetName(Name);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetHomePhone ( _bstr_t homePhone ) {
    HRESULT _hr = raw_SetHomePhone(homePhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetOfficePhone ( _bstr_t officePhone ) {
    HRESULT _hr = raw_SetOfficePhone(officePhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetOtherPhone ( _bstr_t otherPhone ) {
    HRESULT _hr = raw_SetOtherPhone(otherPhone);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetCorpName ( _bstr_t corpName ) {
    HRESULT _hr = raw_SetCorpName(corpName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetDeptName ( _bstr_t deptName ) {
    HRESULT _hr = raw_SetDeptName(deptName);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetEmail ( _bstr_t email ) {
    HRESULT _hr = raw_SetEmail(email);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetMobile ( _bstr_t mobile ) {
    HRESULT _hr = raw_SetMobile(mobile);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetStatus ( long Status ) {
    HRESULT _hr = raw_SetStatus(Status);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline _bstr_t IECSContactInfo::GetUcAccount ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUcAccount(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline _bstr_t IECSContactInfo::GetUcUri ( ) {
    BSTR _result = 0;
    HRESULT _hr = raw_GetUcUri(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _bstr_t(_result, false);
}

inline HRESULT IECSContactInfo::SetUcAccount ( _bstr_t ucAccount ) {
    HRESULT _hr = raw_SetUcAccount(ucAccount);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactInfo::SetUcUri ( _bstr_t ucUri ) {
    HRESULT _hr = raw_SetUcUri(ucUri);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSContactMgr wrapper method implementations
//

inline IECSContactInfoPtr IECSContactMgr::GetContactInfo ( _bstr_t account ) {
    struct IECSContactInfo * _result = 0;
    HRESULT _hr = raw_GetContactInfo(account, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactInfoPtr(_result, false);
}

inline HRESULT IECSContactMgr::GetContactInfoByCondition ( _bstr_t cond, SAFEARRAY * * ppContactInfo ) {
    HRESULT _hr = raw_GetContactInfoByCondition(cond, ppContactInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSContactMgr::SubscribeContactStatus ( _bstr_t account, long subType ) {
    HRESULT _hr = raw_SubscribeContactStatus(account, subType);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSMainWindow wrapper method implementations
//

inline HRESULT IECSMainWindow::MakeCall ( _bstr_t bstrUri, _bstr_t bstrPhoneNo ) {
    HRESULT _hr = raw_MakeCall(bstrUri, bstrPhoneNo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowDialPad ( long Screen_X, long Screen_Y ) {
    HRESULT _hr = raw_ShowDialPad(Screen_X, Screen_Y);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowCreateIMMeeting ( ) {
    HRESULT _hr = raw_ShowCreateIMMeeting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowCreateMMMeeting ( ) {
    HRESULT _hr = raw_ShowCreateMMMeeting();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowIMChat ( _bstr_t receiver ) {
    HRESULT _hr = raw_ShowIMChat(receiver);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSMainWindow::ShowMeetingMgr ( ) {
    HRESULT _hr = raw_ShowMeetingMgr();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSEventCallback wrapper method implementations
//

inline HRESULT IECSEventCallback::OnEventReceived ( enum ECSEventType eventId, VARIANT * param1, VARIANT * param2, IUnknown * eventInfo ) {
    HRESULT _hr = raw_OnEventReceived(eventId, param1, param2, eventInfo);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSEspaceApp wrapper method implementations
//

inline IECSContactInfoPtr IECSEspaceApp::GetSelfInfo ( ) {
    struct IECSContactInfo * _result = 0;
    HRESULT _hr = raw_GetSelfInfo(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactInfoPtr(_result, false);
}

inline IECSContactMgrPtr IECSEspaceApp::GetContactMgr ( ) {
    struct IECSContactMgr * _result = 0;
    HRESULT _hr = raw_GetContactMgr(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSContactMgrPtr(_result, false);
}

inline IECSMainWindowPtr IECSEspaceApp::GetMainWindow ( ) {
    struct IECSMainWindow * _result = 0;
    HRESULT _hr = raw_GetMainWindow(&_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSMainWindowPtr(_result, false);
}

inline HRESULT IECSEspaceApp::RegisterEventListener ( enum ECSEventType eventId, GUID interfaceId, struct IECSEventCallback * handler ) {
    HRESULT _hr = raw_RegisterEventListener(eventId, interfaceId, handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::UnregisterEventListener ( enum ECSEventType eventId, GUID interfaceId, struct IECSEventCallback * handler ) {
    HRESULT _hr = raw_UnregisterEventListener(eventId, interfaceId, handler);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::OnContactStatusChanged ( int _state, _bstr_t _contact ) {
    HRESULT _hr = raw_OnContactStatusChanged(_state, _contact);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::OnLoginStatusChanged ( int state ) {
    HRESULT _hr = raw_OnLoginStatusChanged(state);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSEspaceApp::ShowLoginDialog ( ) {
    HRESULT _hr = raw_ShowLoginDialog();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline IECSOperatorResultPtr IECSEspaceApp::BackGroundLogin ( _bstr_t account, _bstr_t pwd ) {
    struct IECSOperatorResult * _result = 0;
    HRESULT _hr = raw_BackGroundLogin(account, pwd, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSOperatorResultPtr(_result, false);
}

inline IECSOperatorResultPtr IECSEspaceApp::BackGroundTokenLogin ( _bstr_t account, _bstr_t token ) {
    struct IECSOperatorResult * _result = 0;
    HRESULT _hr = raw_BackGroundTokenLogin(account, token, &_result);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return IECSOperatorResultPtr(_result, false);
}

inline HRESULT IECSEspaceApp::OnAppShutdown ( ) {
    HRESULT _hr = raw_OnAppShutdown();
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

//
// interface IECSExternService wrapper method implementations
//

inline HRESULT IECSExternService::QueryContactInfoByKey ( BSTR * pBSTRContactInfo, VARIANT_BOOL IsSelf, _bstr_t strParam ) {
    HRESULT _hr = raw_QueryContactInfoByKey(pBSTRContactInfo, IsSelf, strParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSExternService::StartConversation ( long lConverstaionType, _bstr_t bstrName, _bstr_t bstrCallPhoneNo, const _variant_t & vContactParams ) {
    HRESULT _hr = raw_StartConversation(lConverstaionType, bstrName, bstrCallPhoneNo, vContactParams);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSExternService::DetectStatus ( const _variant_t & varParam ) {
    HRESULT _hr = raw_DetectStatus(varParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSExternService::SubscribeStatus ( long lType, const _variant_t & varParam ) {
    HRESULT _hr = raw_SubscribeStatus(lType, varParam);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}

inline HRESULT IECSExternService::SetSelfeSpaceStatus ( long lStatus ) {
    HRESULT _hr = raw_SetSelfeSpaceStatus(lStatus);
    if (FAILED(_hr)) _com_issue_errorex(_hr, this, __uuidof(this));
    return _hr;
}
